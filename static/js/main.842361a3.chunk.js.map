{"version":3,"sources":["components/MyOwnButton.js","App.js","serviceWorker.js","index.js"],"names":["MyOwnButton","Button","variant","style","backgroundColor","color","onClick","this","props","ButtonName","Component","App","handleChangeName","event","setState","name","target","value","handleChangeNumber","number","handleChangeMessage","message","Send","alert","state","Home","About","Contact","classes","className","AppBar","position","Toolbar","Typography","Paper","root","List","component","ListItem","ListItemText","inset","margin","padding","width","TextField","fullWidth","id","label","onChange","withStyles","theme","flexGrow","alignItems","justifyContent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8QAeeA,E,iLAXP,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAO,CAAEC,gBAAiB,UAAWC,MAAO,SACpEC,QAASC,KAAKC,MAAMF,SACnBC,KAAKC,MAAMC,iB,GANNC,a,+ECcpBC,E,YACJ,WAAYH,GAAQ,IAAD,8BACjB,4CAAMA,KAWRI,iBAAmB,SAACC,GAClB,EAAKC,SAAS,CAAEC,KAAMF,EAAMG,OAAOC,SAblB,EAenBC,mBAAqB,SAACL,GACpB,EAAKC,SAAS,CAAEK,OAAQN,EAAMG,OAAOC,SAhBpB,EAkBnBG,oBAAsB,SAACP,GACrB,EAAKC,SAAS,CAAEO,QAASR,EAAMG,OAAOC,SAnBrB,EAqBnBK,KAAO,WACLC,MAAM,EAAKC,MAAMT,KAAO,KAAO,EAAKS,MAAML,OAAS,KAAO,EAAKK,MAAMH,UAtBpD,EAwBnBI,KAAO,WACLF,MAAM,0CAzBW,EA2BnBG,MAAQ,WACNH,MAAM,iDA5BW,EA8BnBI,QAAU,WACRJ,MAAM,6CA7BN,EAAKC,MAAQ,CACXA,MAAO,CACLT,KAAM,MACNI,OAAQ,WACRE,QAAS,4DANI,E,sEAiCT,IACAO,EAAYrB,KAAKC,MAAjBoB,QACR,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAQzB,MAAM,UAAU0B,SAAS,UAC/B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAY/B,QAAQ,QAAQG,MAAM,WAAlC,qFAKJ,kBAAC6B,EAAA,EAAD,CAAOL,UAAWD,EAAQO,OAG1B,kBAACC,EAAA,EAAD,CAAMC,UAAU,OACd,kBAACC,EAAA,EAAD,CAAUD,UAAU,OAClB,kBAACE,EAAA,EAAD,CAAcC,OAAK,GACjB,kBAAC,EAAD,CAAa/B,WAAW,OAAOH,QAASC,KAAKkB,QAE/C,kBAACc,EAAA,EAAD,CAAcC,OAAK,GACjB,kBAAC,EAAD,CAAa/B,WAAW,QAAQH,QAASC,KAAKmB,SAEhD,kBAACa,EAAA,EAAD,CAAcC,OAAK,GACjB,kBAAC,EAAD,CAAa/B,WAAW,UAAUH,QAASC,KAAKoB,aAItD,0BAAMxB,MAAO,CAAEsC,OAAQ,OAAQC,QAAS,GAAIC,MAAO,MACjD,+CACA,kBAACC,EAAA,EAAD,CACEC,WAAS,EAACC,GAAG,OACbC,MAAM,OACN9B,MAAOV,KAAKiB,MAAMT,KAClBiC,SAAUzC,KAAKK,iBACf6B,OAAO,SACPvC,QAAQ,aACV,6BACA,kBAAC0C,EAAA,EAAD,CACEC,WAAS,EAACC,GAAG,SACbC,MAAM,oBACN9B,MAAOV,KAAKiB,MAAML,OAClB6B,SAAUzC,KAAKW,mBACfuB,OAAO,SACPvC,QAAQ,aACV,6BACA,kBAAC0C,EAAA,EAAD,CACEC,WAAS,EAACC,GAAG,UACbC,MAAM,UACN9B,MAAOV,KAAKiB,MAAMH,QAClB2B,SAAUzC,KAAKa,oBACfqB,OAAO,SACPvC,QAAQ,aACV,6BACA,kBAAC,EAAD,CACEO,WAAW,OACXH,QAASC,KAAKe,a,GAzFRZ,aAiGHuC,eA3GA,SAAAC,GAAK,MAAK,CACvBf,KAAM,CACJgB,SAAU,EACVC,WAAY,UACZC,eAAgB,gBAChBV,MAAO,QAsGIM,CAAmBtC,GCrGd2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.842361a3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nclass MyOwnButton extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button variant=\"contained\" style={{ backgroundColor: '#009688', color: 'white' }}\r\n                    onClick={this.props.onClick}>\r\n                    {this.props.ButtonName}\r\n                </Button>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nexport default MyOwnButton;","import React, { Component } from 'react';\nimport MyOwnButton from './components/MyOwnButton';\nimport './App.css';\nimport { AppBar, Typography, Toolbar, Paper, List, ListItem, ListItemText, TextField } from \"@material-ui/core\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    alignItems: 'justify',\n    justifyContent: 'space-between',\n    width: 1000,\n  },\n\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      state: {\n        name: 'Ved',\n        number: 9876543210,\n        message: 'This is the message I need to send'\n      }\n\n    }\n  }\n\n  handleChangeName = (event) => {\n    this.setState({ name: event.target.value })\n  }\n  handleChangeNumber = (event) => {\n    this.setState({ number: event.target.value })\n  }\n  handleChangeMessage = (event) => {\n    this.setState({ message: event.target.value })\n  }\n  Send = () => {\n    alert(this.state.name + \"\\n\" + this.state.number + \"\\n\" + this.state.message)\n  }\n  Home = () => {\n    alert(\"I must go to Home Page\");\n  }\n  About = () => {\n    alert(\"I must go to About my Page\");\n  }\n  Contact = () => {\n    alert(\"I must go to Contact Page\");\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className=\"App\">\n        <AppBar color=\"primary\" position=\"static\">\n          <Toolbar>\n            <Typography variant=\"title\" color=\"inherit\">\n              Hi this is my own React Application with Material UI\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Paper className={classes.root}>\n\n        </Paper>\n        <List component=\"nav\">\n          <ListItem component=\"div\" >\n            <ListItemText inset>\n              <MyOwnButton ButtonName=\"Home\" onClick={this.Home} />\n            </ListItemText>\n            <ListItemText inset>\n              <MyOwnButton ButtonName=\"About\" onClick={this.About} />\n            </ListItemText>\n            <ListItemText inset>\n              <MyOwnButton ButtonName=\"Contact\" onClick={this.Contact} />\n            </ListItemText>\n          </ListItem>\n        </List>\n        <form style={{ margin: 'auto', padding: 20, width: 600 }}>\n          <h1>Contact Form</h1>\n          <TextField\n            fullWidth id=\"name\"\n            label=\"Name\"\n            value={this.state.name}\n            onChange={this.handleChangeName}\n            margin=\"normal\"\n            variant=\"outlined\" />\n          <br />\n          <TextField\n            fullWidth id=\"number\"\n            label=\"Contact Number\"\n            value={this.state.number}\n            onChange={this.handleChangeNumber}\n            margin=\"normal\"\n            variant=\"outlined\" />\n          <br />\n          <TextField\n            fullWidth id=\"message\"\n            label=\"Message\"\n            value={this.state.message}\n            onChange={this.handleChangeMessage}\n            margin=\"normal\"\n            variant=\"outlined\" />\n          <br />\n          <MyOwnButton\n            ButtonName=\"Send\"\n            onClick={this.Send}\n          />\n        </form>\n      </div>\n\n    )\n  }\n}\nexport default withStyles(styles)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}